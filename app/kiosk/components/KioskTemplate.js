'use client'
import { useRef, useState, useEffect } from 'react';
import {createBrowserHistory} from 'history';
export default function Kiosk() {
    const elementRef = useRef(null);
    const [isFullscreen, setIsFullscreen] = useState(false);


    const history = createBrowserHistory();
    // 1. historyÎùºÎäî ÏÉÅÏàòÏóê createBrowerHistory Ìï®ÏàòÎ•º Ìï†ÎãπÌïúÎã§.

    const preventGoBack = () => {
        // 2. custom hookÏóêÏÑú Ïã§ÌñâÎê† Ìï®ÏàòÎ•º ÏÉùÏÑ±ÌïòÍ≥†, Ìï®ÏàòÎ™ÖÏùÑ preventGoBackÏúºÎ°ú ÏÑ§Ï†ïÌïúÎã§.
        history.push(null, '', history.location.href);
        // 2-1. ÌòÑÏû¨ ÏÉÅÌÉúÎ•º ÏÑ∏ÏÖò ÌûàÏä§ÌÜ†Î¶¨ Ïä§ÌÉùÏóê Ï∂îÍ∞Ä(push)ÌïúÎã§.
        alert('Îí§Î°ú Í∞à Ïàò ÏóÜÎã≠! üêì');
        // 2-2. ÌÜ†Ïä§Ìä∏ Î©îÏÑ∏ÏßÄÎ•º Ï∂úÎ†•ÌïúÎã§.
    };

    // Î∏åÎùºÏö∞Ï†ÄÏóê Î†åÎçîÎßÅ Ïãú Ìïú Î≤àÎßå Ïã§ÌñâÌïòÎäî ÏΩîÎìú
    useEffect(() => {
        (() => {
            history.push(null, '', history.location.href);
            // 3. Î†åÎçîÎßÅ ÏôÑÎ£å Ïãú ÌòÑÏû¨ ÏÉÅÌÉúÎ•º ÏÑ∏ÏÖò ÌûàÏä§ÌÜ†Î¶¨ Ïä§ÌÉùÏóê Ï∂îÍ∞Ä(push)ÌïúÎã§.
            window.addEventListener('popstate', preventGoBack);
            // 3-1. addEventListenerÎ•º Ïù¥Ïö©Ìï¥ "popstate"ÎùºÎäî Ïù¥Î≤§Ìä∏Î•º Í∞êÏßÄÌïòÍ≤å ÌïúÎã§.
            // 3-2. popstate Ïù¥Î≤§Ìä∏Î•º Í∞êÏßÄÌñàÏùÑ Îïå preventGoBack Ìï®ÏàòÍ∞Ä Ïã§ÌñâÎêúÎã§.
        })();

        return () => {
            window.removeEventListener('popstate', preventGoBack);
            // 3-3. Î†åÎçîÎßÅÏù¥ ÎÅùÎÇú Ïù¥ÌõÑÏóî eventListnerÏùÑ Ï†úÍ±∞ÌïúÎã§.
        };
    }, []);

    useEffect(() => {
        history.push(null, '', history.location.href);
        // 4-1. ÌòÑÏû¨ ÏÉÅÌÉúÎ•º ÏÑ∏ÏÖò ÌûàÏä§ÌÜ†Î¶¨ Ïä§ÌÉùÏóê Ï∂îÍ∞Ä(push)ÌïúÎã§.
    }, [history.location]);
    // 4. history.location (pathname)Ïù¥ Î≥ÄÍ≤ΩÎê†ÎïåÎßàÎã§,



    const askPermissionAndEnterFullscreen = () => {
        const userConfirmed = confirm("Ï†ÑÏ≤¥ÌôîÎ©¥ Î™®ÎìúÎ°ú Ï†ÑÌôòÌïòÏãúÍ≤†ÏäµÎãàÍπå?");
        if (userConfirmed) {
            enterFullscreen();
        }
    };

    const enterFullscreen = () => {
        if (elementRef.current.requestFullscreen) {
            elementRef.current.requestFullscreen().catch(err => {
                console.log('Error attempting to enable full-screen mode:', err);
            });
        } else if (elementRef.current.mozRequestFullScreen) { /* Firefox */
            elementRef.current.mozRequestFullScreen().catch(err => {
                console.log('Error attempting to enable full-screen mode:', err);
            });
        } else if (elementRef.current.webkitRequestFullscreen) { /* Chrome, Safari & Opera */
            elementRef.current.webkitRequestFullscreen().catch(err => {
                console.log('Error attempting to enable full-screen mode:', err);
            });
        } else if (elementRef.current.msRequestFullscreen) { /* IE/Edge */
            elementRef.current.msRequestFullscreen().catch(err => {
                console.log('Error attempting to enable full-screen mode:', err);
            });
        }
        setIsFullscreen(true);
    };

    const askPasswordAndExitFullscreen = () => {
        const password = prompt("ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî:");
        if (password === "1234") {  // Replace "your_password" with the desired password
            exitFullscreen();
        } else {
            alert("ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏûòÎ™ªÎêòÏóàÏäµÎãàÎã§.");
            // ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏûòÎ™ªÎêòÏóàÏùÑ Í≤ΩÏö∞ Îã§Ïãú Ï†ÑÏ≤¥ÌôîÎ©¥ Î™®ÎìúÎ°ú Ï†ÑÌôò
            enterFullscreen();
        }
    };

    const exitFullscreen = () => {
        if (document.exitFullscreen) {
            document.exitFullscreen().catch(err => {
                console.log('Error attempting to disable full-screen mode:', err);
            });
        } else if (document.mozCancelFullScreen) { /* Firefox */
            document.mozCancelFullScreen().catch(err => {
                console.log('Error attempting to disable full-screen mode:', err);
            });
        } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */
            document.webkitExitFullscreen().catch(err => {
                console.log('Error attempting to disable full-screen mode:', err);
            });
        } else if (document.msExitFullscreen) { /* IE/Edge */
            document.msExitFullscreen().catch(err => {
                console.log('Error attempting to disable full-screen mode:', err);
            });
        }
        setIsFullscreen(false);
    };



    return (
        <div ref={elementRef} style={{ width: '100%', height: '100%', position: 'relative' }}>
            <button
                onClick={askPermissionAndEnterFullscreen}
                style={{ position: 'absolute', top: 20, left: 20, zIndex: 1000 }}
            >
                Enter Fullscreen
            </button>
            {isFullscreen && (
                <button
                    onClick={exitFullscreen}
                    style={{ position: 'absolute', top: 20, left: 150, zIndex: 1000 }}
                >
                    Exit Fullscreen
                </button>
            )}
            {/* Ï†ÑÏ≤¥ÌôîÎ©¥ ÏΩòÌÖêÏ∏† */}
            <div style={{ width: '100%', height: '100%', backgroundColor: '#f0f0f0' }}>
                <h1>Fullscreen Content</h1>
            </div>
        </div>
    );
};